/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Views;


import Font.GoogleMaterialDesignIcons;
import Font.IconFontSwing;
import Panel.ClientPanel;
import Panel.CommandePanel;
import Panel.DevisCreatePanel;
import Panel.DevisPanel;
import Panel.FacturePanel;
import Panel.FournisseurPanel;
import Panel.Header;
import Panel.HomePanel;
import Models.ModelDevis;
import Models.ModelUser;
import Panel.ClipsPanel;
import Panel.JointPanel;
import Panel.OperateurPanel;
import Panel.PaiementAcompte;
import Panel.PaiementFacture;

import Panel.PaumellePanel;
import Panel.PoigneePanel;
import Panel.ProfilePanel;
import Panel.RivettePanel;
import Panel.RoulettePanel;
import Panel.SerrurePanel;
import Panel.VisPanel;
import Panel.VitrePanel;
import com.formdev.flatlaf.FlatClientProperties;
import com.formdev.flatlaf.FlatDarculaLaf;
import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import com.formdev.flatlaf.themes.FlatMacDarkLaf;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import com.formdev.flatlaf.util.UIScale;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Insets;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.EmptyBorder;
import menu.Menu;
import menu.MenuAction;
import net.miginfocom.swing.MigLayout;
import org.jdesktop.animation.timing.Animator;
import org.jdesktop.animation.timing.TimingTarget;
import org.jdesktop.animation.timing.TimingTargetAdapter;

public class Dashboard extends javax.swing.JFrame {

    // private JPanel transparentPanel; // Nouveau panneau transparent
    private MigLayout layout;
    private Menu menu;
    private Header header;
    private JPanel main;
    private Animator animator;
    private JPanel panelBody;
    private JButton menuButton;
    private JLayeredPane background;
    // private final ModelUser user;

    public Dashboard() {

        init();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1276, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 865, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    
        private void init() {
        setIconImage(new ImageIcon(getClass().getResource("/Icon/kintana.png")).getImage()); // Définir l'icône
        setTitle("Kintana Service | Menuserie Aluminium");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        background = new JLayeredPane();
        background.setBackground(new Color(30, 30, 30));  // Un noir plus doux, proche du FlatLaf Dark
        background.setOpaque(true);

        getContentPane().add(background); // Add the background to the content pane
        setSize(1450, 783);
     
        setLocationRelativeTo(null);
        initMenuArrowIcon();
        menuButton.putClientProperty(FlatClientProperties.STYLE, ""
                + "background:$Menu.button.background;"
                + "arc:999;"
                + "focusWidth:0;"
                + "borderWidth:0");
            //layout = new MigLayout("fill", "0[]0[100%, fill]0", "0[fill]0");
        background.setLayout(new MainFormLayout());
        //background.setLayout(layout);
        menu = new Menu();
        header = new Header();
        main = new JPanel();
        
        main.setLayout(new BorderLayout());
        
        menu = new Menu();
        panelBody = new JPanel(new BorderLayout());
       
      
//        menuButton.addActionListener((ActionEvent e) -> {
//            setMenuFull(!menu.isMenuFull());
//        });
        initMenuEvent();
       // background.add(header);
        background.setLayer(menuButton, JLayeredPane.POPUP_LAYER);
        background.add(menuButton);
        background.add(menu);
        background.add(panelBody);
//          background.add(menu, "w 250!, spany 2"); // Testez avec une largeur légèrement supérieure
//        // Span Y 2cell
//        background.add(header, "h 50!, wrap");
//        background.add(panelBody, "w 100%, h 100%");
     //  Init google icon font
        IconFontSwing.register(GoogleMaterialDesignIcons.getIconFont());
        //  Start with this form   
        
            TimingTarget target = new TimingTargetAdapter() {
            @Override
            public void timingEvent(float fraction) {
                double width;
                if (!menu.isMenuFull()) {
                    width = 60 + (190 * (1f - fraction));
                   //menu.setAlpha(1f - fraction);
                } else {
                    width = 60 + (190 * fraction);
                    // menu.setAlpha(fraction);
                }

                menu.revalidate();
           
            }

           @Override
            public void end() {
                menu.setShowMenu(!menu.isMenuFull());
                menu.setEnableMenu(true);
            }
        };

        animator = new Animator(500, target);
        animator.setResolution(0);
        animator.setDeceleration(0.5f);
        animator.setAcceleration(0.5f);


        menuButton.addActionListener((ActionEvent e) -> {
            if (!animator.isRunning()) {
            setMenuFull(!menu.isMenuFull());
            animator.start();
            }
        });
        showForm(new HomePanel());
        menu.setSelectedMenu(0,0);
    }

   


   
    private void initMenuArrowIcon() {
        if (menuButton == null) {
            menuButton = new JButton();
        }
        String icon = (getComponentOrientation().isLeftToRight()) ? "menu_left.svg" : "menu_right.svg";
        menuButton.setIcon(new FlatSVGIcon("Icon/" + icon, 0.8f));
    }

    private void setMenuFull(boolean full) {
        String icon;
        if (getComponentOrientation().isLeftToRight()) {
            icon = (full) ? "menu_left.svg" : "menu_right.svg";
        } else {
            icon = (full) ? "menu_right.svg" : "menu_left.svg";
        }
        menuButton.setIcon(new FlatSVGIcon("Icon/" + icon, 0.8f));
        menu.setMenuFull(full);
        revalidate();
    }

    public void hideMenu() {
        menu.hideMenuItem();
    }

    public void showForm(Component component) {
        panelBody.removeAll();
        panelBody.add(component);
        panelBody.repaint();
        panelBody.revalidate();
    }

    public void setSelectedMenu(int index, int subIndex) {
        menu.setSelectedMenu(index, subIndex);
    }



    private class MainFormLayout implements LayoutManager {

        @Override
        public void addLayoutComponent(String name, Component comp) {
        }

        @Override
        public void removeLayoutComponent(Component comp) {
        }

        @Override
        public Dimension preferredLayoutSize(Container parent) {
            synchronized (parent.getTreeLock()) {
                return new Dimension(5, 5);
            }
        }

        @Override
        public Dimension minimumLayoutSize(Container parent) {
            synchronized (parent.getTreeLock()) {
                return new Dimension(0, 0);
            }
        }

        @Override
        public void layoutContainer(Container parent) {
            synchronized (parent.getTreeLock()) {
                boolean ltr = parent.getComponentOrientation().isLeftToRight();
                Insets insets = UIScale.scale(parent.getInsets());
                int x = insets.left;
                int y = insets.top;
                int width = parent.getWidth() - (insets.left + insets.right);
                int height = parent.getHeight() - (insets.top + insets.bottom);
                int menuWidth = UIScale.scale(menu.isMenuFull() ? menu.getMenuMaxWidth() : menu.getMenuMinWidth());
                int menuX = ltr ? x : x + width - menuWidth;
                menu.setBounds(menuX, y, menuWidth, height);
                int menuButtonWidth = menuButton.getPreferredSize().width;
                int menuButtonHeight = menuButton.getPreferredSize().height;
                int menubX;
                if (ltr) {
                    menubX = (int) (x + menuWidth - (menuButtonWidth * (menu.isMenuFull() ? 0.5f : 0.3f)));
                } else {
                    menubX = (int) (menuX - (menuButtonWidth * (menu.isMenuFull() ? 0.5f : 0.7f)));
                }
                menuButton.setBounds(menubX, UIScale.scale(30), menuButtonWidth, menuButtonHeight);
                int gap = UIScale.scale(0);
                int bodyWidth = width - menuWidth - gap;
                int bodyHeight = height;
                int bodyx = ltr ? (x + menuWidth + gap) : x;
                int bodyy = y;
                panelBody.setBounds(bodyx, bodyy, bodyWidth, bodyHeight);
            }
        }
    }

 private void initMenuEvent() {
        menu.addMenuEvent((int index, int subIndex, MenuAction action) -> {
            // Application.mainForm.showForm(new DefaultForm("Form : " + index + " " + subIndex));
            switch (index) {
                case 0:

                    showForm(new HomePanel());
                    break;

                case 1:
                    switch (subIndex) {
                        case 1:
                            showForm(new ClientPanel());
                            break;

                        default:
                            action.cancel();
                            break;
                    }
                    break;
                case 2:
                    switch (subIndex) {
                        case 1:
                            showForm(new DevisPanel());
                            break;

                        default:
                            action.cancel();
                            break;
                    }
                    break;
                case 3:
                    switch (subIndex) {
                        case 1:
                            showForm(new CommandePanel());
                            break;

                        default:
                            action.cancel();
                            break;
                    }
                    break;
                case 4:
                    switch (subIndex) {
                        case 1:
                            showForm(new FacturePanel());
                            break;

                        default:
                            action.cancel();
                            break;
                    }
                    break;
                case 5:
                    switch (subIndex) {
                        case 1: {
                            try {
                                showForm(new PaiementAcompte());
                            } catch (Exception ex) {
                                Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        break;
                        case 2: {
                            try {
                                showForm(new PaiementFacture());
                            } catch (Exception ex) {
                                Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        break;
                        default:
                            action.cancel();
                            break;
                    }
                    break;
                case 6:
                    switch (subIndex) {
                        case 1: {

                            try {
                                showForm(new ProfilePanel());
                            } catch (Exception ex) {
                                Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                        break;
                        case 2: {

                            try {
                                showForm(new VitrePanel());
                            } catch (Exception ex) {
                                Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                        break;
                         case 3: {

                            try {
                                showForm(new JointPanel());
                            } catch (Exception ex) {
                                Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                        break;
                         case 4: {

                            try {
                                showForm(new RoulettePanel());
                            } catch (Exception ex) {
                                Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                        break;
                         case 5: {

                            try {
                                showForm(new PaumellePanel());
                            } catch (Exception ex) {
                                Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                        break;
                         case 6: {

                            try {
                                showForm(new SerrurePanel());
                            } catch (Exception ex) {
                                Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                        break;
                         case 7: {

                            try {
                                showForm(new PoigneePanel());
                            } catch (Exception ex) {
                                Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                        break;
                         case 8: {

                            try {
                                showForm(new VisPanel());
                            } catch (Exception ex) {
                                Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                        break;
                         case 9: {

                            try {
                                showForm(new OperateurPanel());
                            } catch (Exception ex) {
                                Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                        break;
                         case 10: {

                            try {
                                showForm(new ClipsPanel());
                            } catch (Exception ex) {
                                Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                        break;
                         case 11: {

                            try {
                                showForm(new RivettePanel());
                            } catch (Exception ex) {
                                Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                        break;
                        default:
                            action.cancel();
                            break;
                    }
                    break;
                case 7:
                    switch (subIndex) {
                        case 1:
                            showForm(new FournisseurPanel());
                            break;

                        default:
                            action.cancel();
                            break;
                    }
                    break;

            }
        });
    }
 
 
 //        header.addMenuEvent((ActionEvent ae) -> {
//            if (!animator.isRunning()) {
//               setMenuFull(!menu.isMenuFull());
//                animator.start();
//            }
//      
//        });
    public void showClientPanel() {
        showForm(new ClientPanel());
    }

    public void showDevisPanel() {
        showForm(new DevisPanel());
    }

    public void showDevisCreatePanel(String clientName) {
        DevisCreatePanel devisCreatePanel = new DevisCreatePanel(clientName); // Pass the client name to the panel
        showForm(devisCreatePanel);
    }

    public void showDevisEditPanel(ModelDevis devis) {
        // Afficher le panneau DevisCreatePanel
        showForm(new DevisCreatePanel(""));
        // Passer les informations du devis à DevisCreatePanel pour les remplir
        DevisCreatePanel.fillDevisForm(devis);
    }

    public void showCommandePanel() {
        showForm(new CommandePanel());
    }

    public void showFacturePanel() {
        showForm(new FacturePanel());
    }

 
  public void selectMenuIndex(int index, int subIndex) {
        menu.setSelectedMenu(index, subIndex);
    }
    public static void main(String args[]) {
        // Appliquer le thème FlatLaf Light
        FlatRobotoFont.install();
        FlatLaf.registerCustomDefaultsSource("theme");
        FlatMacLightLaf.setup();
     // FlatDarculaLaf.setup();
       //FlatMacDarkLaf.setup();
        UIManager.put("defaultFont", new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 13));

//          try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Dashboard().setVisible(true);
        });
    }

}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables




